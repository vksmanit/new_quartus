
my_software.elf:     file format elf32-littlenios2
my_software.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000012b0 memsz 0x000012b0 flags r-x
    LOAD off    0x000022d0 vaddr 0x000092d0 paddr 0x000093c0 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x000024b0 vaddr 0x000094b0 paddr 0x000094b0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000023c0  2**0
                  CONTENTS
  2 .text         00000f28  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000388  00008f48  00008f48  00001f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  000092d0  000093c0  000022d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000094b0  000094b0  000024b0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000094c0  000094c0  000023c0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002d0  00000000  00000000  000023e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004076  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000014e0  00000000  00000000  0000672e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000185d  00000000  00000000  00007c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003e0  00000000  00000000  0000946c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000fdf  00000000  00000000  0000984c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001397  00000000  00000000  0000a82b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000bbc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000238  00000000  00000000  0000bbd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000ceba  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000cebd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000cec9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000ceca  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000cecb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000ced6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000cee1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0000ceec  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000038  00000000  00000000  0000cef4  2**0
                  CONTENTS, READONLY
 26 .jdi          00003de8  00000000  00000000  0000cf2c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000310de  00000000  00000000  00010d14  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008f48 l    d  .rodata	00000000 .rodata
000092d0 l    d  .rwdata	00000000 .rwdata
000094b0 l    d  .bss	00000000 .bss
000094c0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../my_software_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000849c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000092d0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008e1c g     F .text	0000002c alt_main
000083ec g     F .text	00000080 _puts_r
000093c0 g       *ABS*	00000000 __flash_rwdata_start
000083a0 g     F .text	0000004c printf
00008e48 g     F .text	00000038 alt_putstr
00008f40 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000094b0 g     O .bss	00000004 errno
000094b8 g     O .bss	00000004 alt_argv
000113b0 g       *ABS*	00000000 _gp
0000846c g     F .text	00000014 puts
00008364 g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008c58 g     F .text	00000064 .hidden __udivsi3
000093b0 g     O .rwdata	00000004 _global_impure_ptr
000094c0 g       *ABS*	00000000 __bss_end
00008f38 g     F .text	00000004 alt_dcache_flush_all
000093c0 g       *ABS*	00000000 __ram_rwdata_end
00008e80 g     F .text	00000060 write
000092d0 g       *ABS*	00000000 __ram_rodata_end
000093b8 g     O .rwdata	00000004 jtag_uart_0
00008cbc g     F .text	00000058 .hidden __umodsi3
000094c0 g       *ABS*	00000000 end
00010000 g       *ABS*	00000000 __alt_stack_pointer
00008f04 g     F .text	00000034 altera_avalon_jtag_uart_write
00008508 g     F .text	0000052c ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
00008f00 g     F .text	00000004 alt_sys_init
00008d14 g     F .text	00000028 .hidden __mulsi3
000092d0 g       *ABS*	00000000 __ram_rwdata_start
00008f48 g       *ABS*	00000000 __ram_rodata_start
000094c0 g       *ABS*	00000000 __alt_stack_base
00008a50 g     F .text	000000b8 __sfvwrite_small_dev
000094b0 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000308 main
000094b4 g     O .bss	00000004 alt_envp
000093bc g     O .rwdata	00000004 alt_errno
00008b60 g     F .text	00000084 .hidden __divsi3
00008f48 g       *ABS*	00000000 __flash_rodata_start
00008ee0 g     F .text	00000020 alt_irq_init
00008b08 g     F .text	00000058 _write_r
000093b4 g     O .rwdata	00000004 _impure_ptr
000094bc g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
000093c0 g       *ABS*	00000000 _edata
000094c0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008be4 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008480 g     F .text	0000001c strlen
00008f3c g     F .text	00000004 alt_icache_flush_all
00008a34 g     F .text	0000001c __vfprintf_internal
00008d3c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d684ec14 	ori	gp,gp,5040
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a52c14 	ori	r2,r2,38064

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e53014 	ori	r3,r3,38080

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008d3c0 	call	8d3c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008e1c0 	call	8e1c <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#include "io.h"
#include <stdio.h>

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    805c:	01000074 	movhi	r4,1
#include "system.h"
#include "io.h"
#include <stdio.h>

int main()
{ 
    8060:	defffb04 	addi	sp,sp,-20
  alt_putstr("Hello from Nios II!\n");
    8064:	2123d204 	addi	r4,r4,-28856
#include "system.h"
#include "io.h"
#include <stdio.h>

int main()
{ 
    8068:	dcc00315 	stw	r19,12(sp)
    806c:	dfc00415 	stw	ra,16(sp)
    8070:	dc800215 	stw	r18,8(sp)
    8074:	dc400115 	stw	r17,4(sp)
    8078:	dc000015 	stw	r16,0(sp)
  alt_putstr("Hello from Nios II!\n");
    807c:	0008e480 	call	8e48 <alt_putstr>
  unsigned int x2 = 0x40000000;
  unsigned int x3 = 0x40400000;
  unsigned int x4 = 0x40800000;
  
  
  IOWR(MY_NEW_COMPONENT_0_BASE,1,a11);  printf ("Writing [0x%x] to a11 register.\n", a11);
    8080:	00800074 	movhi	r2,1
    8084:	04cfe034 	movhi	r19,16256
    8088:	10842104 	addi	r2,r2,4228
    808c:	14c00035 	stwio	r19,0(r2)
    8090:	01000074 	movhi	r4,1
    8094:	980b883a 	mov	r5,r19
    8098:	2123d804 	addi	r4,r4,-28832
    809c:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,2,a12);  printf ("Writing [0x%x] to a12 register.\n", a12);
    80a0:	00800074 	movhi	r2,1
    80a4:	04900034 	movhi	r18,16384
    80a8:	10842204 	addi	r2,r2,4232
    80ac:	14800035 	stwio	r18,0(r2)
    80b0:	01000074 	movhi	r4,1
    80b4:	900b883a 	mov	r5,r18
    80b8:	2123e104 	addi	r4,r4,-28796
    80bc:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,3,a13);  printf ("Writing [0x%x] to a13 register.\n", a13);
    80c0:	00800074 	movhi	r2,1
    80c4:	04501034 	movhi	r17,16448
    80c8:	10842304 	addi	r2,r2,4236
    80cc:	14400035 	stwio	r17,0(r2)
    80d0:	01000074 	movhi	r4,1
    80d4:	880b883a 	mov	r5,r17
    80d8:	2123ea04 	addi	r4,r4,-28760
    80dc:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,4,a14);  printf ("Writing [0x%x] to a14 register.\n", a14);
    80e0:	00800074 	movhi	r2,1
    80e4:	04102034 	movhi	r16,16512
    80e8:	10842404 	addi	r2,r2,4240
    80ec:	14000035 	stwio	r16,0(r2)
    80f0:	01000074 	movhi	r4,1
    80f4:	800b883a 	mov	r5,r16
    80f8:	2123f304 	addi	r4,r4,-28724
    80fc:	00083a00 	call	83a0 <printf>
  
  IOWR(MY_NEW_COMPONENT_0_BASE,5,a21);  printf ("Writing [0x%x] to a21 register.\n", a21);
    8100:	00800074 	movhi	r2,1
    8104:	01504c34 	movhi	r5,16688
    8108:	10842504 	addi	r2,r2,4244
    810c:	11400035 	stwio	r5,0(r2)
    8110:	01000074 	movhi	r4,1
    8114:	2123fc04 	addi	r4,r4,-28688
    8118:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,6,a22);  printf ("Writing [0x%x] to a22 register.\n", a22);
    811c:	00800074 	movhi	r2,1
    8120:	01505034 	movhi	r5,16704
    8124:	10842604 	addi	r2,r2,4248
    8128:	11400035 	stwio	r5,0(r2)
    812c:	01000074 	movhi	r4,1
    8130:	21240504 	addi	r4,r4,-28652
    8134:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,7,a23);  printf ("Writing [0x%x] to a23 register.\n", a23);
    8138:	00800074 	movhi	r2,1
    813c:	01505434 	movhi	r5,16720
    8140:	10842704 	addi	r2,r2,4252
    8144:	11400035 	stwio	r5,0(r2)
    8148:	01000074 	movhi	r4,1
    814c:	21240e04 	addi	r4,r4,-28616
    8150:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,8,a24);  printf ("Writing [0x%x] to a24 register.\n", a24);
    8154:	00800074 	movhi	r2,1
    8158:	01505834 	movhi	r5,16736
    815c:	10842804 	addi	r2,r2,4256
    8160:	11400035 	stwio	r5,0(r2)
    8164:	01000074 	movhi	r4,1
    8168:	21241704 	addi	r4,r4,-28580
    816c:	00083a00 	call	83a0 <printf>

  IOWR(MY_NEW_COMPONENT_0_BASE,9, a31);  printf ("Writing [0x%x] to a31 register.\n", a31);
    8170:	00800074 	movhi	r2,1
    8174:	01506a34 	movhi	r5,16808
    8178:	10842904 	addi	r2,r2,4260
    817c:	11400035 	stwio	r5,0(r2)
    8180:	01000074 	movhi	r4,1
    8184:	21242004 	addi	r4,r4,-28544
    8188:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,10,a32);  printf ("Writing [0x%x] to a32 register.\n", a32);
    818c:	00800074 	movhi	r2,1
    8190:	01506c34 	movhi	r5,16816
    8194:	10842a04 	addi	r2,r2,4264
    8198:	11400035 	stwio	r5,0(r2)
    819c:	01000074 	movhi	r4,1
    81a0:	21242904 	addi	r4,r4,-28508
    81a4:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,11,a33);  printf ("Writing [0x%x] to a33 register.\n", a33);
    81a8:	00800074 	movhi	r2,1
    81ac:	01506e34 	movhi	r5,16824
    81b0:	10842b04 	addi	r2,r2,4268
    81b4:	11400035 	stwio	r5,0(r2)
    81b8:	01000074 	movhi	r4,1
    81bc:	21243204 	addi	r4,r4,-28472
    81c0:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,12,a34);  printf ("Writing [0x%x] to a34 register.\n", a34);
    81c4:	00800074 	movhi	r2,1
    81c8:	01507034 	movhi	r5,16832
    81cc:	10842c04 	addi	r2,r2,4272
    81d0:	11400035 	stwio	r5,0(r2)
    81d4:	01000074 	movhi	r4,1
    81d8:	21243b04 	addi	r4,r4,-28436
    81dc:	00083a00 	call	83a0 <printf>
  
  IOWR(MY_NEW_COMPONENT_0_BASE,13,a41);  printf ("Writing [0x%x] to a41 register.\n", a41);
    81e0:	00800074 	movhi	r2,1
    81e4:	01507e34 	movhi	r5,16888
    81e8:	10842d04 	addi	r2,r2,4276
    81ec:	11400035 	stwio	r5,0(r2)
    81f0:	01000074 	movhi	r4,1
    81f4:	21244404 	addi	r4,r4,-28400
    81f8:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,14,a42);  printf ("Writing [0x%x] to a42 register.\n", a42);
    81fc:	00800074 	movhi	r2,1
    8200:	01508034 	movhi	r5,16896
    8204:	10842e04 	addi	r2,r2,4280
    8208:	11400035 	stwio	r5,0(r2)
    820c:	01000074 	movhi	r4,1
    8210:	21244d04 	addi	r4,r4,-28364
    8214:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,15,a43);  printf ("Writing [0x%x] to a43 register.\n", a43);
    8218:	00800074 	movhi	r2,1
    821c:	01508134 	movhi	r5,16900
    8220:	10842f04 	addi	r2,r2,4284
    8224:	11400035 	stwio	r5,0(r2)
    8228:	01000074 	movhi	r4,1
    822c:	21245604 	addi	r4,r4,-28328
    8230:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,16,a44);  printf ("Writing [0x%x] to a44 register.\n", a44);
    8234:	00800074 	movhi	r2,1
    8238:	01508234 	movhi	r5,16904
    823c:	10843004 	addi	r2,r2,4288
    8240:	11400035 	stwio	r5,0(r2)
    8244:	01000074 	movhi	r4,1
    8248:	21245f04 	addi	r4,r4,-28292
    824c:	00083a00 	call	83a0 <printf>
  
  IOWR(MY_NEW_COMPONENT_0_BASE,17,x1);  printf ("Writing [0x%x] to x1 register.\n", x1);
    8250:	00800074 	movhi	r2,1
    8254:	10843104 	addi	r2,r2,4292
    8258:	14c00035 	stwio	r19,0(r2)
    825c:	01000074 	movhi	r4,1
    8260:	980b883a 	mov	r5,r19
    8264:	21246804 	addi	r4,r4,-28256
    8268:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,18,x2);  printf ("Writing [0x%x] to x2 register.\n", x2);
    826c:	00800074 	movhi	r2,1
    8270:	10843204 	addi	r2,r2,4296
    8274:	14800035 	stwio	r18,0(r2)
    8278:	01000074 	movhi	r4,1
    827c:	900b883a 	mov	r5,r18
    8280:	21247004 	addi	r4,r4,-28224
    8284:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,19,x3);  printf ("Writing [0x%x] to x3 register.\n", x3);
    8288:	00800074 	movhi	r2,1
    828c:	10843304 	addi	r2,r2,4300
    8290:	14400035 	stwio	r17,0(r2)
    8294:	01000074 	movhi	r4,1
    8298:	880b883a 	mov	r5,r17
    829c:	21247804 	addi	r4,r4,-28192
    82a0:	00083a00 	call	83a0 <printf>
  IOWR(MY_NEW_COMPONENT_0_BASE,20,x4);  printf ("Writing [0x%x] to x4 register.\n", x4);
    82a4:	00800074 	movhi	r2,1
    82a8:	10843404 	addi	r2,r2,4304
    82ac:	14000035 	stwio	r16,0(r2)
    82b0:	01000074 	movhi	r4,1
    82b4:	800b883a 	mov	r5,r16
    82b8:	21248004 	addi	r4,r4,-28160
    82bc:	00083a00 	call	83a0 <printf>
 
  printf ("Writing 0x1 to control/status register to trigger the operation.\n");
    82c0:	01000074 	movhi	r4,1
    82c4:	21248804 	addi	r4,r4,-28128
    82c8:	000846c0 	call	846c <puts>
  IOWR(MY_NEW_COMPONENT_0_BASE,0,0x1);
    82cc:	00800074 	movhi	r2,1
    82d0:	10842004 	addi	r2,r2,4224
    82d4:	00c00044 	movi	r3,1
    82d8:	10c00035 	stwio	r3,0(r2)
    82dc:	1021883a 	mov	r16,r2

  unsigned int status ;
  do {
      status = IORD(MY_NEW_COMPONENT_0_BASE,0);
    82e0:	84400037 	ldwio	r17,0(r16)
  alt_putstr("Hello from Nios II!\n");
    82e4:	01000074 	movhi	r4,1
    82e8:	2123d204 	addi	r4,r4,-28856
    82ec:	0008e480 	call	8e48 <alt_putstr>
  }
  while (0!= status);
    82f0:	883ffb1e 	bne	r17,zero,82e0 <main+0x284>
  printf("status is 0. Reading the result register.\n");
    82f4:	01000074 	movhi	r4,1
    82f8:	21249904 	addi	r4,r4,-28060
    82fc:	000846c0 	call	846c <puts>

  unsigned int b1= IORD (MY_NEW_COMPONENT_0_BASE,21);
  printf("b1 = [0x%0x]\n", b1);
    8300:	00800074 	movhi	r2,1
    8304:	10843504 	addi	r2,r2,4308
    8308:	11400037 	ldwio	r5,0(r2)
    830c:	01000074 	movhi	r4,1
    8310:	2124a404 	addi	r4,r4,-28016
    8314:	00083a00 	call	83a0 <printf>

  unsigned int b2= IORD (MY_NEW_COMPONENT_0_BASE,22);
  printf("b2 = [0x%0x]\n", b2);
    8318:	00800074 	movhi	r2,1
    831c:	10843604 	addi	r2,r2,4312
    8320:	11400037 	ldwio	r5,0(r2)
    8324:	01000074 	movhi	r4,1
    8328:	2124a804 	addi	r4,r4,-28000
    832c:	00083a00 	call	83a0 <printf>

  unsigned int b3= IORD (MY_NEW_COMPONENT_0_BASE,23);
  printf("b3 = [0x%0x]\n", b3);
    8330:	00800074 	movhi	r2,1
    8334:	10843704 	addi	r2,r2,4316
    8338:	11400037 	ldwio	r5,0(r2)
    833c:	01000074 	movhi	r4,1
    8340:	2124ac04 	addi	r4,r4,-27984
    8344:	00083a00 	call	83a0 <printf>

  unsigned int b4= IORD (MY_NEW_COMPONENT_0_BASE,24);
  printf("b4 = [0x%0x]\n", b4);
    8348:	00800074 	movhi	r2,1
    834c:	10843804 	addi	r2,r2,4320
    8350:	11400037 	ldwio	r5,0(r2)
    8354:	01000074 	movhi	r4,1
    8358:	2124b004 	addi	r4,r4,-27968
    835c:	00083a00 	call	83a0 <printf>
    8360:	003fff06 	br	8360 <main+0x304>

00008364 <_printf_r>:
    8364:	defffd04 	addi	sp,sp,-12
    8368:	dfc00015 	stw	ra,0(sp)
    836c:	d9800115 	stw	r6,4(sp)
    8370:	d9c00215 	stw	r7,8(sp)
    8374:	20c00217 	ldw	r3,8(r4)
    8378:	01800074 	movhi	r6,1
    837c:	31a29404 	addi	r6,r6,-30128
    8380:	19800115 	stw	r6,4(r3)
    8384:	280d883a 	mov	r6,r5
    8388:	21400217 	ldw	r5,8(r4)
    838c:	d9c00104 	addi	r7,sp,4
    8390:	00085080 	call	8508 <___vfprintf_internal_r>
    8394:	dfc00017 	ldw	ra,0(sp)
    8398:	dec00304 	addi	sp,sp,12
    839c:	f800283a 	ret

000083a0 <printf>:
    83a0:	defffc04 	addi	sp,sp,-16
    83a4:	dfc00015 	stw	ra,0(sp)
    83a8:	d9400115 	stw	r5,4(sp)
    83ac:	d9800215 	stw	r6,8(sp)
    83b0:	d9c00315 	stw	r7,12(sp)
    83b4:	00800074 	movhi	r2,1
    83b8:	10a4ed04 	addi	r2,r2,-27724
    83bc:	10800017 	ldw	r2,0(r2)
    83c0:	01400074 	movhi	r5,1
    83c4:	29629404 	addi	r5,r5,-30128
    83c8:	10c00217 	ldw	r3,8(r2)
    83cc:	d9800104 	addi	r6,sp,4
    83d0:	19400115 	stw	r5,4(r3)
    83d4:	200b883a 	mov	r5,r4
    83d8:	11000217 	ldw	r4,8(r2)
    83dc:	0008a340 	call	8a34 <__vfprintf_internal>
    83e0:	dfc00017 	ldw	ra,0(sp)
    83e4:	dec00404 	addi	sp,sp,16
    83e8:	f800283a 	ret

000083ec <_puts_r>:
    83ec:	defffd04 	addi	sp,sp,-12
    83f0:	dc000015 	stw	r16,0(sp)
    83f4:	2021883a 	mov	r16,r4
    83f8:	2809883a 	mov	r4,r5
    83fc:	dfc00215 	stw	ra,8(sp)
    8400:	dc400115 	stw	r17,4(sp)
    8404:	2823883a 	mov	r17,r5
    8408:	00084800 	call	8480 <strlen>
    840c:	81400217 	ldw	r5,8(r16)
    8410:	01000074 	movhi	r4,1
    8414:	21229404 	addi	r4,r4,-30128
    8418:	29000115 	stw	r4,4(r5)
    841c:	100f883a 	mov	r7,r2
    8420:	880d883a 	mov	r6,r17
    8424:	8009883a 	mov	r4,r16
    8428:	0008a500 	call	8a50 <__sfvwrite_small_dev>
    842c:	00ffffc4 	movi	r3,-1
    8430:	10c00926 	beq	r2,r3,8458 <_puts_r+0x6c>
    8434:	81400217 	ldw	r5,8(r16)
    8438:	01800074 	movhi	r6,1
    843c:	01c00044 	movi	r7,1
    8440:	28800117 	ldw	r2,4(r5)
    8444:	31a4a704 	addi	r6,r6,-28004
    8448:	8009883a 	mov	r4,r16
    844c:	103ee83a 	callr	r2
    8450:	10bfffe0 	cmpeqi	r2,r2,-1
    8454:	0085c83a 	sub	r2,zero,r2
    8458:	dfc00217 	ldw	ra,8(sp)
    845c:	dc400117 	ldw	r17,4(sp)
    8460:	dc000017 	ldw	r16,0(sp)
    8464:	dec00304 	addi	sp,sp,12
    8468:	f800283a 	ret

0000846c <puts>:
    846c:	00800074 	movhi	r2,1
    8470:	10a4ed04 	addi	r2,r2,-27724
    8474:	200b883a 	mov	r5,r4
    8478:	11000017 	ldw	r4,0(r2)
    847c:	00083ec1 	jmpi	83ec <_puts_r>

00008480 <strlen>:
    8480:	2005883a 	mov	r2,r4
    8484:	10c00007 	ldb	r3,0(r2)
    8488:	18000226 	beq	r3,zero,8494 <strlen+0x14>
    848c:	10800044 	addi	r2,r2,1
    8490:	003ffc06 	br	8484 <strlen+0x4>
    8494:	1105c83a 	sub	r2,r2,r4
    8498:	f800283a 	ret

0000849c <print_repeat>:
    849c:	defffb04 	addi	sp,sp,-20
    84a0:	dc800315 	stw	r18,12(sp)
    84a4:	dc400215 	stw	r17,8(sp)
    84a8:	dc000115 	stw	r16,4(sp)
    84ac:	dfc00415 	stw	ra,16(sp)
    84b0:	2025883a 	mov	r18,r4
    84b4:	2823883a 	mov	r17,r5
    84b8:	d9800005 	stb	r6,0(sp)
    84bc:	3821883a 	mov	r16,r7
    84c0:	04000a0e 	bge	zero,r16,84ec <print_repeat+0x50>
    84c4:	88800117 	ldw	r2,4(r17)
    84c8:	01c00044 	movi	r7,1
    84cc:	d80d883a 	mov	r6,sp
    84d0:	880b883a 	mov	r5,r17
    84d4:	9009883a 	mov	r4,r18
    84d8:	103ee83a 	callr	r2
    84dc:	843fffc4 	addi	r16,r16,-1
    84e0:	103ff726 	beq	r2,zero,84c0 <print_repeat+0x24>
    84e4:	00bfffc4 	movi	r2,-1
    84e8:	00000106 	br	84f0 <print_repeat+0x54>
    84ec:	0005883a 	mov	r2,zero
    84f0:	dfc00417 	ldw	ra,16(sp)
    84f4:	dc800317 	ldw	r18,12(sp)
    84f8:	dc400217 	ldw	r17,8(sp)
    84fc:	dc000117 	ldw	r16,4(sp)
    8500:	dec00504 	addi	sp,sp,20
    8504:	f800283a 	ret

00008508 <___vfprintf_internal_r>:
    8508:	deffe504 	addi	sp,sp,-108
    850c:	d8c00804 	addi	r3,sp,32
    8510:	ddc01815 	stw	r23,96(sp)
    8514:	dd801715 	stw	r22,92(sp)
    8518:	dd401615 	stw	r21,88(sp)
    851c:	dd001515 	stw	r20,84(sp)
    8520:	dcc01415 	stw	r19,80(sp)
    8524:	dc801315 	stw	r18,76(sp)
    8528:	dc401215 	stw	r17,72(sp)
    852c:	dc001115 	stw	r16,68(sp)
    8530:	dfc01a15 	stw	ra,104(sp)
    8534:	df001915 	stw	fp,100(sp)
    8538:	2029883a 	mov	r20,r4
    853c:	2823883a 	mov	r17,r5
    8540:	382d883a 	mov	r22,r7
    8544:	d9800f15 	stw	r6,60(sp)
    8548:	0021883a 	mov	r16,zero
    854c:	d8000e15 	stw	zero,56(sp)
    8550:	d8000a15 	stw	zero,40(sp)
    8554:	002b883a 	mov	r21,zero
    8558:	0027883a 	mov	r19,zero
    855c:	0025883a 	mov	r18,zero
    8560:	d8000c15 	stw	zero,48(sp)
    8564:	d8000b15 	stw	zero,44(sp)
    8568:	002f883a 	mov	r23,zero
    856c:	d8c00915 	stw	r3,36(sp)
    8570:	d8c00f17 	ldw	r3,60(sp)
    8574:	19000003 	ldbu	r4,0(r3)
    8578:	20803fcc 	andi	r2,r4,255
    857c:	1080201c 	xori	r2,r2,128
    8580:	10bfe004 	addi	r2,r2,-128
    8584:	10011e26 	beq	r2,zero,8a00 <___vfprintf_internal_r+0x4f8>
    8588:	00c00044 	movi	r3,1
    858c:	b8c01426 	beq	r23,r3,85e0 <___vfprintf_internal_r+0xd8>
    8590:	1dc00216 	blt	r3,r23,859c <___vfprintf_internal_r+0x94>
    8594:	b8000626 	beq	r23,zero,85b0 <___vfprintf_internal_r+0xa8>
    8598:	00011506 	br	89f0 <___vfprintf_internal_r+0x4e8>
    859c:	01400084 	movi	r5,2
    85a0:	b9401d26 	beq	r23,r5,8618 <___vfprintf_internal_r+0x110>
    85a4:	014000c4 	movi	r5,3
    85a8:	b9402b26 	beq	r23,r5,8658 <___vfprintf_internal_r+0x150>
    85ac:	00011006 	br	89f0 <___vfprintf_internal_r+0x4e8>
    85b0:	01400944 	movi	r5,37
    85b4:	1140fc26 	beq	r2,r5,89a8 <___vfprintf_internal_r+0x4a0>
    85b8:	88800117 	ldw	r2,4(r17)
    85bc:	d9000005 	stb	r4,0(sp)
    85c0:	01c00044 	movi	r7,1
    85c4:	d80d883a 	mov	r6,sp
    85c8:	880b883a 	mov	r5,r17
    85cc:	a009883a 	mov	r4,r20
    85d0:	103ee83a 	callr	r2
    85d4:	1000d81e 	bne	r2,zero,8938 <___vfprintf_internal_r+0x430>
    85d8:	84000044 	addi	r16,r16,1
    85dc:	00010406 	br	89f0 <___vfprintf_internal_r+0x4e8>
    85e0:	01400c04 	movi	r5,48
    85e4:	1140fa26 	beq	r2,r5,89d0 <___vfprintf_internal_r+0x4c8>
    85e8:	01400944 	movi	r5,37
    85ec:	11400a1e 	bne	r2,r5,8618 <___vfprintf_internal_r+0x110>
    85f0:	d8800005 	stb	r2,0(sp)
    85f4:	88800117 	ldw	r2,4(r17)
    85f8:	b80f883a 	mov	r7,r23
    85fc:	d80d883a 	mov	r6,sp
    8600:	880b883a 	mov	r5,r17
    8604:	a009883a 	mov	r4,r20
    8608:	103ee83a 	callr	r2
    860c:	1000ca1e 	bne	r2,zero,8938 <___vfprintf_internal_r+0x430>
    8610:	84000044 	addi	r16,r16,1
    8614:	0000f506 	br	89ec <___vfprintf_internal_r+0x4e4>
    8618:	25fff404 	addi	r23,r4,-48
    861c:	bdc03fcc 	andi	r23,r23,255
    8620:	00c00244 	movi	r3,9
    8624:	1dc00936 	bltu	r3,r23,864c <___vfprintf_internal_r+0x144>
    8628:	00bfffc4 	movi	r2,-1
    862c:	90800426 	beq	r18,r2,8640 <___vfprintf_internal_r+0x138>
    8630:	01400284 	movi	r5,10
    8634:	9009883a 	mov	r4,r18
    8638:	0008d140 	call	8d14 <__mulsi3>
    863c:	00000106 	br	8644 <___vfprintf_internal_r+0x13c>
    8640:	0005883a 	mov	r2,zero
    8644:	b8a5883a 	add	r18,r23,r2
    8648:	0000e206 	br	89d4 <___vfprintf_internal_r+0x4cc>
    864c:	01400b84 	movi	r5,46
    8650:	1140e426 	beq	r2,r5,89e4 <___vfprintf_internal_r+0x4dc>
    8654:	05c00084 	movi	r23,2
    8658:	213ff404 	addi	r4,r4,-48
    865c:	27003fcc 	andi	fp,r4,255
    8660:	00c00244 	movi	r3,9
    8664:	1f000936 	bltu	r3,fp,868c <___vfprintf_internal_r+0x184>
    8668:	00bfffc4 	movi	r2,-1
    866c:	98800426 	beq	r19,r2,8680 <___vfprintf_internal_r+0x178>
    8670:	01400284 	movi	r5,10
    8674:	9809883a 	mov	r4,r19
    8678:	0008d140 	call	8d14 <__mulsi3>
    867c:	00000106 	br	8684 <___vfprintf_internal_r+0x17c>
    8680:	0005883a 	mov	r2,zero
    8684:	e0a7883a 	add	r19,fp,r2
    8688:	0000d906 	br	89f0 <___vfprintf_internal_r+0x4e8>
    868c:	00c01b04 	movi	r3,108
    8690:	10c0d226 	beq	r2,r3,89dc <___vfprintf_internal_r+0x4d4>
    8694:	013fffc4 	movi	r4,-1
    8698:	99000226 	beq	r19,r4,86a4 <___vfprintf_internal_r+0x19c>
    869c:	d8000b15 	stw	zero,44(sp)
    86a0:	00000106 	br	86a8 <___vfprintf_internal_r+0x1a0>
    86a4:	04c00044 	movi	r19,1
    86a8:	01001a44 	movi	r4,105
    86ac:	11001626 	beq	r2,r4,8708 <___vfprintf_internal_r+0x200>
    86b0:	20800916 	blt	r4,r2,86d8 <___vfprintf_internal_r+0x1d0>
    86b4:	010018c4 	movi	r4,99
    86b8:	11008826 	beq	r2,r4,88dc <___vfprintf_internal_r+0x3d4>
    86bc:	01001904 	movi	r4,100
    86c0:	11001126 	beq	r2,r4,8708 <___vfprintf_internal_r+0x200>
    86c4:	01001604 	movi	r4,88
    86c8:	1100c81e 	bne	r2,r4,89ec <___vfprintf_internal_r+0x4e4>
    86cc:	00c00044 	movi	r3,1
    86d0:	d8c00e15 	stw	r3,56(sp)
    86d4:	00001506 	br	872c <___vfprintf_internal_r+0x224>
    86d8:	01001cc4 	movi	r4,115
    86dc:	11009826 	beq	r2,r4,8940 <___vfprintf_internal_r+0x438>
    86e0:	20800416 	blt	r4,r2,86f4 <___vfprintf_internal_r+0x1ec>
    86e4:	01001bc4 	movi	r4,111
    86e8:	1100c01e 	bne	r2,r4,89ec <___vfprintf_internal_r+0x4e4>
    86ec:	05400204 	movi	r21,8
    86f0:	00000f06 	br	8730 <___vfprintf_internal_r+0x228>
    86f4:	01001d44 	movi	r4,117
    86f8:	11000d26 	beq	r2,r4,8730 <___vfprintf_internal_r+0x228>
    86fc:	01001e04 	movi	r4,120
    8700:	11000a26 	beq	r2,r4,872c <___vfprintf_internal_r+0x224>
    8704:	0000b906 	br	89ec <___vfprintf_internal_r+0x4e4>
    8708:	d8c00a17 	ldw	r3,40(sp)
    870c:	b7000104 	addi	fp,r22,4
    8710:	18000726 	beq	r3,zero,8730 <___vfprintf_internal_r+0x228>
    8714:	df000d15 	stw	fp,52(sp)
    8718:	b5c00017 	ldw	r23,0(r22)
    871c:	b800080e 	bge	r23,zero,8740 <___vfprintf_internal_r+0x238>
    8720:	05efc83a 	sub	r23,zero,r23
    8724:	02400044 	movi	r9,1
    8728:	00000606 	br	8744 <___vfprintf_internal_r+0x23c>
    872c:	05400404 	movi	r21,16
    8730:	b0c00104 	addi	r3,r22,4
    8734:	d8c00d15 	stw	r3,52(sp)
    8738:	b5c00017 	ldw	r23,0(r22)
    873c:	d8000a15 	stw	zero,40(sp)
    8740:	0013883a 	mov	r9,zero
    8744:	d839883a 	mov	fp,sp
    8748:	b8001726 	beq	r23,zero,87a8 <___vfprintf_internal_r+0x2a0>
    874c:	a80b883a 	mov	r5,r21
    8750:	b809883a 	mov	r4,r23
    8754:	da401015 	stw	r9,64(sp)
    8758:	0008c580 	call	8c58 <__udivsi3>
    875c:	a80b883a 	mov	r5,r21
    8760:	1009883a 	mov	r4,r2
    8764:	102d883a 	mov	r22,r2
    8768:	0008d140 	call	8d14 <__mulsi3>
    876c:	b885c83a 	sub	r2,r23,r2
    8770:	00c00244 	movi	r3,9
    8774:	da401017 	ldw	r9,64(sp)
    8778:	18800216 	blt	r3,r2,8784 <___vfprintf_internal_r+0x27c>
    877c:	10800c04 	addi	r2,r2,48
    8780:	00000506 	br	8798 <___vfprintf_internal_r+0x290>
    8784:	d8c00e17 	ldw	r3,56(sp)
    8788:	18000226 	beq	r3,zero,8794 <___vfprintf_internal_r+0x28c>
    878c:	10800dc4 	addi	r2,r2,55
    8790:	00000106 	br	8798 <___vfprintf_internal_r+0x290>
    8794:	108015c4 	addi	r2,r2,87
    8798:	e0800005 	stb	r2,0(fp)
    879c:	b02f883a 	mov	r23,r22
    87a0:	e7000044 	addi	fp,fp,1
    87a4:	003fe806 	br	8748 <___vfprintf_internal_r+0x240>
    87a8:	e6efc83a 	sub	r23,fp,sp
    87ac:	9dc5c83a 	sub	r2,r19,r23
    87b0:	0080090e 	bge	zero,r2,87d8 <___vfprintf_internal_r+0x2d0>
    87b4:	e085883a 	add	r2,fp,r2
    87b8:	01400c04 	movi	r5,48
    87bc:	d8c00917 	ldw	r3,36(sp)
    87c0:	e009883a 	mov	r4,fp
    87c4:	e0c0032e 	bgeu	fp,r3,87d4 <___vfprintf_internal_r+0x2cc>
    87c8:	e7000044 	addi	fp,fp,1
    87cc:	21400005 	stb	r5,0(r4)
    87d0:	e0bffa1e 	bne	fp,r2,87bc <___vfprintf_internal_r+0x2b4>
    87d4:	e6efc83a 	sub	r23,fp,sp
    87d8:	d8c00b17 	ldw	r3,44(sp)
    87dc:	4dd1883a 	add	r8,r9,r23
    87e0:	922dc83a 	sub	r22,r18,r8
    87e4:	18001626 	beq	r3,zero,8840 <___vfprintf_internal_r+0x338>
    87e8:	48000a26 	beq	r9,zero,8814 <___vfprintf_internal_r+0x30c>
    87ec:	00800b44 	movi	r2,45
    87f0:	d8800805 	stb	r2,32(sp)
    87f4:	88800117 	ldw	r2,4(r17)
    87f8:	01c00044 	movi	r7,1
    87fc:	d9800804 	addi	r6,sp,32
    8800:	880b883a 	mov	r5,r17
    8804:	a009883a 	mov	r4,r20
    8808:	103ee83a 	callr	r2
    880c:	10004a1e 	bne	r2,zero,8938 <___vfprintf_internal_r+0x430>
    8810:	84000044 	addi	r16,r16,1
    8814:	0580070e 	bge	zero,r22,8834 <___vfprintf_internal_r+0x32c>
    8818:	b00f883a 	mov	r7,r22
    881c:	01800c04 	movi	r6,48
    8820:	880b883a 	mov	r5,r17
    8824:	a009883a 	mov	r4,r20
    8828:	000849c0 	call	849c <print_repeat>
    882c:	1000421e 	bne	r2,zero,8938 <___vfprintf_internal_r+0x430>
    8830:	85a1883a 	add	r16,r16,r22
    8834:	e02d883a 	mov	r22,fp
    8838:	bf2fc83a 	sub	r23,r23,fp
    883c:	00002006 	br	88c0 <___vfprintf_internal_r+0x3b8>
    8840:	0580090e 	bge	zero,r22,8868 <___vfprintf_internal_r+0x360>
    8844:	b00f883a 	mov	r7,r22
    8848:	01800804 	movi	r6,32
    884c:	880b883a 	mov	r5,r17
    8850:	a009883a 	mov	r4,r20
    8854:	da401015 	stw	r9,64(sp)
    8858:	000849c0 	call	849c <print_repeat>
    885c:	da401017 	ldw	r9,64(sp)
    8860:	1000351e 	bne	r2,zero,8938 <___vfprintf_internal_r+0x430>
    8864:	85a1883a 	add	r16,r16,r22
    8868:	483ff226 	beq	r9,zero,8834 <___vfprintf_internal_r+0x32c>
    886c:	00800b44 	movi	r2,45
    8870:	d8800805 	stb	r2,32(sp)
    8874:	88800117 	ldw	r2,4(r17)
    8878:	01c00044 	movi	r7,1
    887c:	d9800804 	addi	r6,sp,32
    8880:	880b883a 	mov	r5,r17
    8884:	a009883a 	mov	r4,r20
    8888:	103ee83a 	callr	r2
    888c:	10002a1e 	bne	r2,zero,8938 <___vfprintf_internal_r+0x430>
    8890:	84000044 	addi	r16,r16,1
    8894:	003fe706 	br	8834 <___vfprintf_internal_r+0x32c>
    8898:	b5bfffc4 	addi	r22,r22,-1
    889c:	b0800003 	ldbu	r2,0(r22)
    88a0:	01c00044 	movi	r7,1
    88a4:	d9800804 	addi	r6,sp,32
    88a8:	d8800805 	stb	r2,32(sp)
    88ac:	88800117 	ldw	r2,4(r17)
    88b0:	880b883a 	mov	r5,r17
    88b4:	a009883a 	mov	r4,r20
    88b8:	103ee83a 	callr	r2
    88bc:	10001e1e 	bne	r2,zero,8938 <___vfprintf_internal_r+0x430>
    88c0:	8585c83a 	sub	r2,r16,r22
    88c4:	b5c9883a 	add	r4,r22,r23
    88c8:	e085883a 	add	r2,fp,r2
    88cc:	013ff216 	blt	zero,r4,8898 <___vfprintf_internal_r+0x390>
    88d0:	1021883a 	mov	r16,r2
    88d4:	dd800d17 	ldw	r22,52(sp)
    88d8:	00004406 	br	89ec <___vfprintf_internal_r+0x4e4>
    88dc:	00800044 	movi	r2,1
    88e0:	1480080e 	bge	r2,r18,8904 <___vfprintf_internal_r+0x3fc>
    88e4:	95ffffc4 	addi	r23,r18,-1
    88e8:	b80f883a 	mov	r7,r23
    88ec:	01800804 	movi	r6,32
    88f0:	880b883a 	mov	r5,r17
    88f4:	a009883a 	mov	r4,r20
    88f8:	000849c0 	call	849c <print_repeat>
    88fc:	10000e1e 	bne	r2,zero,8938 <___vfprintf_internal_r+0x430>
    8900:	85e1883a 	add	r16,r16,r23
    8904:	b0800017 	ldw	r2,0(r22)
    8908:	01c00044 	movi	r7,1
    890c:	d80d883a 	mov	r6,sp
    8910:	d8800005 	stb	r2,0(sp)
    8914:	88800117 	ldw	r2,4(r17)
    8918:	880b883a 	mov	r5,r17
    891c:	a009883a 	mov	r4,r20
    8920:	b5c00104 	addi	r23,r22,4
    8924:	103ee83a 	callr	r2
    8928:	1000031e 	bne	r2,zero,8938 <___vfprintf_internal_r+0x430>
    892c:	84000044 	addi	r16,r16,1
    8930:	b82d883a 	mov	r22,r23
    8934:	00002d06 	br	89ec <___vfprintf_internal_r+0x4e4>
    8938:	00bfffc4 	movi	r2,-1
    893c:	00003106 	br	8a04 <___vfprintf_internal_r+0x4fc>
    8940:	b5c00017 	ldw	r23,0(r22)
    8944:	b7000104 	addi	fp,r22,4
    8948:	b809883a 	mov	r4,r23
    894c:	00084800 	call	8480 <strlen>
    8950:	9091c83a 	sub	r8,r18,r2
    8954:	102d883a 	mov	r22,r2
    8958:	0200090e 	bge	zero,r8,8980 <___vfprintf_internal_r+0x478>
    895c:	400f883a 	mov	r7,r8
    8960:	01800804 	movi	r6,32
    8964:	880b883a 	mov	r5,r17
    8968:	a009883a 	mov	r4,r20
    896c:	da001015 	stw	r8,64(sp)
    8970:	000849c0 	call	849c <print_repeat>
    8974:	da001017 	ldw	r8,64(sp)
    8978:	103fef1e 	bne	r2,zero,8938 <___vfprintf_internal_r+0x430>
    897c:	8221883a 	add	r16,r16,r8
    8980:	88800117 	ldw	r2,4(r17)
    8984:	b00f883a 	mov	r7,r22
    8988:	b80d883a 	mov	r6,r23
    898c:	880b883a 	mov	r5,r17
    8990:	a009883a 	mov	r4,r20
    8994:	103ee83a 	callr	r2
    8998:	103fe71e 	bne	r2,zero,8938 <___vfprintf_internal_r+0x430>
    899c:	85a1883a 	add	r16,r16,r22
    89a0:	e02d883a 	mov	r22,fp
    89a4:	00001106 	br	89ec <___vfprintf_internal_r+0x4e4>
    89a8:	00c00044 	movi	r3,1
    89ac:	04ffffc4 	movi	r19,-1
    89b0:	d8000e15 	stw	zero,56(sp)
    89b4:	d8c00a15 	stw	r3,40(sp)
    89b8:	05400284 	movi	r21,10
    89bc:	9825883a 	mov	r18,r19
    89c0:	d8000c15 	stw	zero,48(sp)
    89c4:	d8000b15 	stw	zero,44(sp)
    89c8:	182f883a 	mov	r23,r3
    89cc:	00000806 	br	89f0 <___vfprintf_internal_r+0x4e8>
    89d0:	ddc00b15 	stw	r23,44(sp)
    89d4:	05c00084 	movi	r23,2
    89d8:	00000506 	br	89f0 <___vfprintf_internal_r+0x4e8>
    89dc:	00c00044 	movi	r3,1
    89e0:	d8c00c15 	stw	r3,48(sp)
    89e4:	05c000c4 	movi	r23,3
    89e8:	00000106 	br	89f0 <___vfprintf_internal_r+0x4e8>
    89ec:	002f883a 	mov	r23,zero
    89f0:	d8c00f17 	ldw	r3,60(sp)
    89f4:	18c00044 	addi	r3,r3,1
    89f8:	d8c00f15 	stw	r3,60(sp)
    89fc:	003edc06 	br	8570 <___vfprintf_internal_r+0x68>
    8a00:	8005883a 	mov	r2,r16
    8a04:	dfc01a17 	ldw	ra,104(sp)
    8a08:	df001917 	ldw	fp,100(sp)
    8a0c:	ddc01817 	ldw	r23,96(sp)
    8a10:	dd801717 	ldw	r22,92(sp)
    8a14:	dd401617 	ldw	r21,88(sp)
    8a18:	dd001517 	ldw	r20,84(sp)
    8a1c:	dcc01417 	ldw	r19,80(sp)
    8a20:	dc801317 	ldw	r18,76(sp)
    8a24:	dc401217 	ldw	r17,72(sp)
    8a28:	dc001117 	ldw	r16,68(sp)
    8a2c:	dec01b04 	addi	sp,sp,108
    8a30:	f800283a 	ret

00008a34 <__vfprintf_internal>:
    8a34:	00800074 	movhi	r2,1
    8a38:	10a4ed04 	addi	r2,r2,-27724
    8a3c:	300f883a 	mov	r7,r6
    8a40:	280d883a 	mov	r6,r5
    8a44:	200b883a 	mov	r5,r4
    8a48:	11000017 	ldw	r4,0(r2)
    8a4c:	00085081 	jmpi	8508 <___vfprintf_internal_r>

00008a50 <__sfvwrite_small_dev>:
    8a50:	2880000b 	ldhu	r2,0(r5)
    8a54:	1080020c 	andi	r2,r2,8
    8a58:	10002126 	beq	r2,zero,8ae0 <__sfvwrite_small_dev+0x90>
    8a5c:	2880008f 	ldh	r2,2(r5)
    8a60:	defffa04 	addi	sp,sp,-24
    8a64:	dc000015 	stw	r16,0(sp)
    8a68:	dfc00515 	stw	ra,20(sp)
    8a6c:	dd000415 	stw	r20,16(sp)
    8a70:	dcc00315 	stw	r19,12(sp)
    8a74:	dc800215 	stw	r18,8(sp)
    8a78:	dc400115 	stw	r17,4(sp)
    8a7c:	2821883a 	mov	r16,r5
    8a80:	10001216 	blt	r2,zero,8acc <__sfvwrite_small_dev+0x7c>
    8a84:	2027883a 	mov	r19,r4
    8a88:	3025883a 	mov	r18,r6
    8a8c:	3823883a 	mov	r17,r7
    8a90:	05010004 	movi	r20,1024
    8a94:	04400b0e 	bge	zero,r17,8ac4 <__sfvwrite_small_dev+0x74>
    8a98:	880f883a 	mov	r7,r17
    8a9c:	a440010e 	bge	r20,r17,8aa4 <__sfvwrite_small_dev+0x54>
    8aa0:	01c10004 	movi	r7,1024
    8aa4:	8140008f 	ldh	r5,2(r16)
    8aa8:	900d883a 	mov	r6,r18
    8aac:	9809883a 	mov	r4,r19
    8ab0:	0008b080 	call	8b08 <_write_r>
    8ab4:	0080050e 	bge	zero,r2,8acc <__sfvwrite_small_dev+0x7c>
    8ab8:	88a3c83a 	sub	r17,r17,r2
    8abc:	90a5883a 	add	r18,r18,r2
    8ac0:	003ff406 	br	8a94 <__sfvwrite_small_dev+0x44>
    8ac4:	0005883a 	mov	r2,zero
    8ac8:	00000706 	br	8ae8 <__sfvwrite_small_dev+0x98>
    8acc:	8080000b 	ldhu	r2,0(r16)
    8ad0:	10801014 	ori	r2,r2,64
    8ad4:	8080000d 	sth	r2,0(r16)
    8ad8:	00bfffc4 	movi	r2,-1
    8adc:	00000206 	br	8ae8 <__sfvwrite_small_dev+0x98>
    8ae0:	00bfffc4 	movi	r2,-1
    8ae4:	f800283a 	ret
    8ae8:	dfc00517 	ldw	ra,20(sp)
    8aec:	dd000417 	ldw	r20,16(sp)
    8af0:	dcc00317 	ldw	r19,12(sp)
    8af4:	dc800217 	ldw	r18,8(sp)
    8af8:	dc400117 	ldw	r17,4(sp)
    8afc:	dc000017 	ldw	r16,0(sp)
    8b00:	dec00604 	addi	sp,sp,24
    8b04:	f800283a 	ret

00008b08 <_write_r>:
    8b08:	defffd04 	addi	sp,sp,-12
    8b0c:	dc000015 	stw	r16,0(sp)
    8b10:	04000074 	movhi	r16,1
    8b14:	dc400115 	stw	r17,4(sp)
    8b18:	84252c04 	addi	r16,r16,-27472
    8b1c:	2023883a 	mov	r17,r4
    8b20:	2809883a 	mov	r4,r5
    8b24:	300b883a 	mov	r5,r6
    8b28:	380d883a 	mov	r6,r7
    8b2c:	dfc00215 	stw	ra,8(sp)
    8b30:	80000015 	stw	zero,0(r16)
    8b34:	0008e800 	call	8e80 <write>
    8b38:	00ffffc4 	movi	r3,-1
    8b3c:	10c0031e 	bne	r2,r3,8b4c <_write_r+0x44>
    8b40:	80c00017 	ldw	r3,0(r16)
    8b44:	18000126 	beq	r3,zero,8b4c <_write_r+0x44>
    8b48:	88c00015 	stw	r3,0(r17)
    8b4c:	dfc00217 	ldw	ra,8(sp)
    8b50:	dc400117 	ldw	r17,4(sp)
    8b54:	dc000017 	ldw	r16,0(sp)
    8b58:	dec00304 	addi	sp,sp,12
    8b5c:	f800283a 	ret

00008b60 <__divsi3>:
    8b60:	20001b16 	blt	r4,zero,8bd0 <__divsi3+0x70>
    8b64:	000f883a 	mov	r7,zero
    8b68:	28001616 	blt	r5,zero,8bc4 <__divsi3+0x64>
    8b6c:	200d883a 	mov	r6,r4
    8b70:	29001a2e 	bgeu	r5,r4,8bdc <__divsi3+0x7c>
    8b74:	00800804 	movi	r2,32
    8b78:	00c00044 	movi	r3,1
    8b7c:	00000106 	br	8b84 <__divsi3+0x24>
    8b80:	10000d26 	beq	r2,zero,8bb8 <__divsi3+0x58>
    8b84:	294b883a 	add	r5,r5,r5
    8b88:	10bfffc4 	addi	r2,r2,-1
    8b8c:	18c7883a 	add	r3,r3,r3
    8b90:	293ffb36 	bltu	r5,r4,8b80 <__divsi3+0x20>
    8b94:	0005883a 	mov	r2,zero
    8b98:	18000726 	beq	r3,zero,8bb8 <__divsi3+0x58>
    8b9c:	0005883a 	mov	r2,zero
    8ba0:	31400236 	bltu	r6,r5,8bac <__divsi3+0x4c>
    8ba4:	314dc83a 	sub	r6,r6,r5
    8ba8:	10c4b03a 	or	r2,r2,r3
    8bac:	1806d07a 	srli	r3,r3,1
    8bb0:	280ad07a 	srli	r5,r5,1
    8bb4:	183ffa1e 	bne	r3,zero,8ba0 <__divsi3+0x40>
    8bb8:	38000126 	beq	r7,zero,8bc0 <__divsi3+0x60>
    8bbc:	0085c83a 	sub	r2,zero,r2
    8bc0:	f800283a 	ret
    8bc4:	014bc83a 	sub	r5,zero,r5
    8bc8:	39c0005c 	xori	r7,r7,1
    8bcc:	003fe706 	br	8b6c <__divsi3+0xc>
    8bd0:	0109c83a 	sub	r4,zero,r4
    8bd4:	01c00044 	movi	r7,1
    8bd8:	003fe306 	br	8b68 <__divsi3+0x8>
    8bdc:	00c00044 	movi	r3,1
    8be0:	003fee06 	br	8b9c <__divsi3+0x3c>

00008be4 <__modsi3>:
    8be4:	20001716 	blt	r4,zero,8c44 <__modsi3+0x60>
    8be8:	000f883a 	mov	r7,zero
    8bec:	2005883a 	mov	r2,r4
    8bf0:	28001216 	blt	r5,zero,8c3c <__modsi3+0x58>
    8bf4:	2900162e 	bgeu	r5,r4,8c50 <__modsi3+0x6c>
    8bf8:	01800804 	movi	r6,32
    8bfc:	00c00044 	movi	r3,1
    8c00:	00000106 	br	8c08 <__modsi3+0x24>
    8c04:	30000a26 	beq	r6,zero,8c30 <__modsi3+0x4c>
    8c08:	294b883a 	add	r5,r5,r5
    8c0c:	31bfffc4 	addi	r6,r6,-1
    8c10:	18c7883a 	add	r3,r3,r3
    8c14:	293ffb36 	bltu	r5,r4,8c04 <__modsi3+0x20>
    8c18:	18000526 	beq	r3,zero,8c30 <__modsi3+0x4c>
    8c1c:	1806d07a 	srli	r3,r3,1
    8c20:	11400136 	bltu	r2,r5,8c28 <__modsi3+0x44>
    8c24:	1145c83a 	sub	r2,r2,r5
    8c28:	280ad07a 	srli	r5,r5,1
    8c2c:	183ffb1e 	bne	r3,zero,8c1c <__modsi3+0x38>
    8c30:	38000126 	beq	r7,zero,8c38 <__modsi3+0x54>
    8c34:	0085c83a 	sub	r2,zero,r2
    8c38:	f800283a 	ret
    8c3c:	014bc83a 	sub	r5,zero,r5
    8c40:	003fec06 	br	8bf4 <__modsi3+0x10>
    8c44:	0109c83a 	sub	r4,zero,r4
    8c48:	01c00044 	movi	r7,1
    8c4c:	003fe706 	br	8bec <__modsi3+0x8>
    8c50:	00c00044 	movi	r3,1
    8c54:	003ff106 	br	8c1c <__modsi3+0x38>

00008c58 <__udivsi3>:
    8c58:	200d883a 	mov	r6,r4
    8c5c:	2900152e 	bgeu	r5,r4,8cb4 <__udivsi3+0x5c>
    8c60:	28001416 	blt	r5,zero,8cb4 <__udivsi3+0x5c>
    8c64:	00800804 	movi	r2,32
    8c68:	00c00044 	movi	r3,1
    8c6c:	00000206 	br	8c78 <__udivsi3+0x20>
    8c70:	10000e26 	beq	r2,zero,8cac <__udivsi3+0x54>
    8c74:	28000516 	blt	r5,zero,8c8c <__udivsi3+0x34>
    8c78:	294b883a 	add	r5,r5,r5
    8c7c:	10bfffc4 	addi	r2,r2,-1
    8c80:	18c7883a 	add	r3,r3,r3
    8c84:	293ffa36 	bltu	r5,r4,8c70 <__udivsi3+0x18>
    8c88:	18000826 	beq	r3,zero,8cac <__udivsi3+0x54>
    8c8c:	0005883a 	mov	r2,zero
    8c90:	31400236 	bltu	r6,r5,8c9c <__udivsi3+0x44>
    8c94:	314dc83a 	sub	r6,r6,r5
    8c98:	10c4b03a 	or	r2,r2,r3
    8c9c:	1806d07a 	srli	r3,r3,1
    8ca0:	280ad07a 	srli	r5,r5,1
    8ca4:	183ffa1e 	bne	r3,zero,8c90 <__udivsi3+0x38>
    8ca8:	f800283a 	ret
    8cac:	0005883a 	mov	r2,zero
    8cb0:	f800283a 	ret
    8cb4:	00c00044 	movi	r3,1
    8cb8:	003ff406 	br	8c8c <__udivsi3+0x34>

00008cbc <__umodsi3>:
    8cbc:	2005883a 	mov	r2,r4
    8cc0:	2900122e 	bgeu	r5,r4,8d0c <__umodsi3+0x50>
    8cc4:	28001116 	blt	r5,zero,8d0c <__umodsi3+0x50>
    8cc8:	01800804 	movi	r6,32
    8ccc:	00c00044 	movi	r3,1
    8cd0:	00000206 	br	8cdc <__umodsi3+0x20>
    8cd4:	30000c26 	beq	r6,zero,8d08 <__umodsi3+0x4c>
    8cd8:	28000516 	blt	r5,zero,8cf0 <__umodsi3+0x34>
    8cdc:	294b883a 	add	r5,r5,r5
    8ce0:	31bfffc4 	addi	r6,r6,-1
    8ce4:	18c7883a 	add	r3,r3,r3
    8ce8:	293ffa36 	bltu	r5,r4,8cd4 <__umodsi3+0x18>
    8cec:	18000626 	beq	r3,zero,8d08 <__umodsi3+0x4c>
    8cf0:	1806d07a 	srli	r3,r3,1
    8cf4:	11400136 	bltu	r2,r5,8cfc <__umodsi3+0x40>
    8cf8:	1145c83a 	sub	r2,r2,r5
    8cfc:	280ad07a 	srli	r5,r5,1
    8d00:	183ffb1e 	bne	r3,zero,8cf0 <__umodsi3+0x34>
    8d04:	f800283a 	ret
    8d08:	f800283a 	ret
    8d0c:	00c00044 	movi	r3,1
    8d10:	003ff706 	br	8cf0 <__umodsi3+0x34>

00008d14 <__mulsi3>:
    8d14:	0005883a 	mov	r2,zero
    8d18:	20000726 	beq	r4,zero,8d38 <__mulsi3+0x24>
    8d1c:	20c0004c 	andi	r3,r4,1
    8d20:	2008d07a 	srli	r4,r4,1
    8d24:	18000126 	beq	r3,zero,8d2c <__mulsi3+0x18>
    8d28:	1145883a 	add	r2,r2,r5
    8d2c:	294b883a 	add	r5,r5,r5
    8d30:	203ffa1e 	bne	r4,zero,8d1c <__mulsi3+0x8>
    8d34:	f800283a 	ret
    8d38:	f800283a 	ret

00008d3c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8d3c:	deffff04 	addi	sp,sp,-4
    8d40:	01000074 	movhi	r4,1
    8d44:	01400074 	movhi	r5,1
    8d48:	dfc00015 	stw	ra,0(sp)
    8d4c:	2124b404 	addi	r4,r4,-27952
    8d50:	2964f004 	addi	r5,r5,-27712

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8d54:	2140061e 	bne	r4,r5,8d70 <alt_load+0x34>
    8d58:	01000074 	movhi	r4,1
    8d5c:	01400074 	movhi	r5,1
    8d60:	21200804 	addi	r4,r4,-32736
    8d64:	29600804 	addi	r5,r5,-32736
    8d68:	2140121e 	bne	r4,r5,8db4 <alt_load+0x78>
    8d6c:	00000b06 	br	8d9c <alt_load+0x60>
    8d70:	00c00074 	movhi	r3,1
    8d74:	18e4f004 	addi	r3,r3,-27712
    8d78:	1907c83a 	sub	r3,r3,r4
    8d7c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8d80:	10fff526 	beq	r2,r3,8d58 <alt_load+0x1c>
    {
      *to++ = *from++;
    8d84:	114f883a 	add	r7,r2,r5
    8d88:	39c00017 	ldw	r7,0(r7)
    8d8c:	110d883a 	add	r6,r2,r4
    8d90:	10800104 	addi	r2,r2,4
    8d94:	31c00015 	stw	r7,0(r6)
    8d98:	003ff906 	br	8d80 <alt_load+0x44>
    8d9c:	01000074 	movhi	r4,1
    8da0:	01400074 	movhi	r5,1
    8da4:	2123d204 	addi	r4,r4,-28856
    8da8:	2963d204 	addi	r5,r5,-28856

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8dac:	2140101e 	bne	r4,r5,8df0 <alt_load+0xb4>
    8db0:	00000b06 	br	8de0 <alt_load+0xa4>
    8db4:	00c00074 	movhi	r3,1
    8db8:	18e00804 	addi	r3,r3,-32736
    8dbc:	1907c83a 	sub	r3,r3,r4
    8dc0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8dc4:	10fff526 	beq	r2,r3,8d9c <alt_load+0x60>
    {
      *to++ = *from++;
    8dc8:	114f883a 	add	r7,r2,r5
    8dcc:	39c00017 	ldw	r7,0(r7)
    8dd0:	110d883a 	add	r6,r2,r4
    8dd4:	10800104 	addi	r2,r2,4
    8dd8:	31c00015 	stw	r7,0(r6)
    8ddc:	003ff906 	br	8dc4 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8de0:	0008f380 	call	8f38 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8de4:	dfc00017 	ldw	ra,0(sp)
    8de8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8dec:	0008f3c1 	jmpi	8f3c <alt_icache_flush_all>
    8df0:	00c00074 	movhi	r3,1
    8df4:	18e4b404 	addi	r3,r3,-27952
    8df8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8dfc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8e00:	18bff726 	beq	r3,r2,8de0 <alt_load+0xa4>
    {
      *to++ = *from++;
    8e04:	114f883a 	add	r7,r2,r5
    8e08:	39c00017 	ldw	r7,0(r7)
    8e0c:	110d883a 	add	r6,r2,r4
    8e10:	10800104 	addi	r2,r2,4
    8e14:	31c00015 	stw	r7,0(r6)
    8e18:	003ff906 	br	8e00 <alt_load+0xc4>

00008e1c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8e1c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8e20:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8e24:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8e28:	0008ee00 	call	8ee0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8e2c:	0008f000 	call	8f00 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8e30:	d1a04117 	ldw	r6,-32508(gp)
    8e34:	d1604217 	ldw	r5,-32504(gp)
    8e38:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8e3c:	dfc00017 	ldw	ra,0(sp)
    8e40:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8e44:	000805c1 	jmpi	805c <main>

00008e48 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8e48:	defffe04 	addi	sp,sp,-8
    8e4c:	dc000015 	stw	r16,0(sp)
    8e50:	dfc00115 	stw	ra,4(sp)
    8e54:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8e58:	00084800 	call	8480 <strlen>
    8e5c:	01000074 	movhi	r4,1
    8e60:	000f883a 	mov	r7,zero
    8e64:	100d883a 	mov	r6,r2
    8e68:	800b883a 	mov	r5,r16
    8e6c:	2124ee04 	addi	r4,r4,-27720
#else
    return fputs(str, stdout);
#endif
#endif
}
    8e70:	dfc00117 	ldw	ra,4(sp)
    8e74:	dc000017 	ldw	r16,0(sp)
    8e78:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8e7c:	0008f041 	jmpi	8f04 <altera_avalon_jtag_uart_write>

00008e80 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8e80:	00800044 	movi	r2,1
    8e84:	20800226 	beq	r4,r2,8e90 <write+0x10>
    8e88:	00800084 	movi	r2,2
    8e8c:	2080041e 	bne	r4,r2,8ea0 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8e90:	01000074 	movhi	r4,1
    8e94:	000f883a 	mov	r7,zero
    8e98:	2124ee04 	addi	r4,r4,-27720
    8e9c:	0008f041 	jmpi	8f04 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8ea0:	d0a00317 	ldw	r2,-32756(gp)
    8ea4:	10000926 	beq	r2,zero,8ecc <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8ea8:	deffff04 	addi	sp,sp,-4
    8eac:	dfc00015 	stw	ra,0(sp)
    8eb0:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8eb4:	00c01444 	movi	r3,81
    8eb8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8ebc:	00bfffc4 	movi	r2,-1
    8ec0:	dfc00017 	ldw	ra,0(sp)
    8ec4:	dec00104 	addi	sp,sp,4
    8ec8:	f800283a 	ret
    8ecc:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8ed0:	00c01444 	movi	r3,81
    8ed4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8ed8:	00bfffc4 	movi	r2,-1
    8edc:	f800283a 	ret

00008ee0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8ee0:	deffff04 	addi	sp,sp,-4
    8ee4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8ee8:	0008f400 	call	8f40 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8eec:	00800044 	movi	r2,1
    8ef0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8ef4:	dfc00017 	ldw	ra,0(sp)
    8ef8:	dec00104 	addi	sp,sp,4
    8efc:	f800283a 	ret

00008f00 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8f00:	f800283a 	ret

00008f04 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8f04:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8f08:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8f0c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8f10:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8f14:	2980072e 	bgeu	r5,r6,8f34 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8f18:	38c00037 	ldwio	r3,0(r7)
    8f1c:	18ffffec 	andhi	r3,r3,65535
    8f20:	183ffc26 	beq	r3,zero,8f14 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8f24:	28c00007 	ldb	r3,0(r5)
    8f28:	20c00035 	stwio	r3,0(r4)
    8f2c:	29400044 	addi	r5,r5,1
    8f30:	003ff806 	br	8f14 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
    8f34:	f800283a 	ret

00008f38 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8f38:	f800283a 	ret

00008f3c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8f3c:	f800283a 	ret

00008f40 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8f40:	000170fa 	wrctl	ienable,zero
    8f44:	f800283a 	ret
